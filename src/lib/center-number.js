const dataString = `رقم التصريح	رقم مركز الخدمة
10000596	50
8	27
30	32
191	11
222	11
310	11
527	11
683	11
731	11
779	11
809	11
834	11
899	11
906	11
1082	11
1083	12
1132	12
1133	12
1139	12
1183	12
1295	12
1485	12
1669	12
1697	12
1700	12
1762	12
1878	12
2011	12
2187	13
2210	13
2302	13
2357	13
2610	13
2714	13
2995	13
3385	13
3447	13
3738	13
3835	13
3847	13
3864	13
3959	14
4196	14
4243	14
4547	14
4561	14
4584	14
4647	14
4662	14
4766	14
4851	15
5021	15
5024	15
5147	15
5436	15
5516	15
5533	15
5588	15
5595	15
5596	15
5656	15
5672	15
5678	16
5708	16
5726	16
5769	16
5904	16
5945	16
6204	16
6264	16
6396	16
6457	17
6461	17
6483	17
6498	17
6503	17
6573	17
6632	17
6639	17
6655	17
6656	17
6680	17
6681	17
6683	17
6692	18
6714	18
6718	18
6727	18
6788	18
6962	18
6970	18
6986	18
7011	18
7018	18
7093	18
7105	18
7160	18
7161	18
7162	18
7187	19
7192	19
7205	19
7210	19
7214	19
7264	19
7293	19
7294	19
7308	19
7336	19
7348	19
7364	19
7365	19
7390	20
7426	20
7432	20
7471	20
7582	20
7601	20
7634	20
7666	20
7681	20
7698	20
7785	20
7797	20
7799	22
7823	22
7837	22
7840	22
7841	22
7848	22
7850	22
7863	22
7864	22
7876	22
7902	22
7910	22
7912	22
7914	22
7928	23
7934	23
7967	23
7993	23
8004	23
8014	23
8019	23
8049	23
8050	23
8052	24
8058	24
8087	24
8103	24
8109	24
8116	24
8137	24
8138	24
8168	24
8235	24
8246	24
8280	24
8283	24
8284	24
8304	24
8312	25
8316	25
8317	25
8320	25
8364	25
8384	25
8386	25
8395	25
8396	25
8420	25
8435	25
8457	25
8458	25
8459	26
8488	26
8489	26
8491	26
8513	26
8537	26
8539	26
8568	26
8584	26
8586	27
8589	27
8610	27
8611	27
8612	27
8744	27
8782	27
8783	28
8828	28
8962	28
8975	28
9056	28
9059	28
9113	28
9158	28
9284	28
9381	28
9436	28
9452	28
9464	29
9470	29
9475	29
9478	29
9479	29
9495	29
9507	29
9561	29
9611	29
9900	29
10424	29
10441	29
10474	29
10561	29
10623	30
10866	30
11009	30
11014	30
11071	30
11197	30
11226	30
11232	30
11345	30
11350	30
11370	30
11444	30
11463	30
11479	30
11570	30
11575	31
11584	31
11642	31
11651	31
11672	31
11692	31
11723	31
11807	31
11823	31
11858	31
11859	31
11864	31
11890	31
11937	31
11954	31
11957	32
11976	32
11987	32
11995	32
12005	32
12028	32
12051	32
12108	32
12120	32
12202	32
12204	33
12208	33
12277	33
12353	33
12436	33
12448	33
12460	33
12462	33
12468	33
12517	33
12577	33
12595	33
12610	33
12630	33
12633	33
12656	33
12697	33
12719	33
12730	33
12752	34
12761	34
12790	34
12809	34
12814	34
12838	34
12840	34
12878	34
12918	34
12936	34
12949	34
12958	34
12967	35
12969	35
12974	35
12979	35
13007	35
13009	35
13045	35
13047	35
13048	35
13060	35
13068	35
13085	36
13105	36
13117	36
13149	36
13173	36
13191	36
13213	36
13237	36
13241	36
13260	36
13266	36
13270	37
13271	37
13274	37
13275	37
13286	37
13296	37
13297	37
13319	37
13384	37
13386	37
13395	37
13396	37
13432	37
13459	37
13489	38
13510	38
13541	38
13549	38
13579	38
13590	38
13610	38
13640	38
13644	38
13645	38
13686	38
13715	38
13727	38
13762	39
13832	39
13842	39
13849	39
13874	39
13875	39
13902	39
13935	39
14021	39
14102	39
14132	39
14159	39
14200	39
14212	40
14218	40
14250	40
14259	40
14269	40
14285	40
14289	40
14367	40
14400	40
14403	40
14412	40
14418	40
14431	40
14435	40
14438	40
14457	40
14470	40
14489	42
14496	42
14497	42
14511	42
14542	42
14544	42
14642	42
14644	42
14652	42
14672	42
14703	42
14726	42
14730	42
14811	42
14841	42
14906	42
14909	42
14915	42
14921	43
14980	43
15015	43
15017	43
15020	43
15095	43
15120	43
15128	43
15143	43
15151	43
15156	43
15196	43
15210	43
15212	43
15222	43
15233	43
15341	43
15393	50
15423	50
15431	50
15466	50
15468	50
15500	50
10000596	50
10000643	50
10001652	50
10002130	50
10002236	50
10002500	50
10002521	50
10006217	50
10006701	50
10007053	50
10007126	50
10007403	50
10007435	50
10007441	50
10007774	50
10008693	50
10009393	50
4873	50
10006217	50
10001442	50
10009788	50
4753	50
10002500	50
`;

const permitToServiceCenterMap = {};
const lines = dataString.trim().split('\n');

// Start from the second line (index 1) to skip the header
for (let i = 1; i < lines.length; i++) {
    const line = lines[i].trim(); // Trim each line to remove potential leading/trailing whitespace
    if (!line) continue; // Skip empty lines that might result from extra newlines

    // Split by one or more whitespace characters (handles tabs and spaces)
    const parts = line.split(/\s+/);

    if (parts.length === 2) {
        const permitIdStr = parts[0];
        const serviceCenterIdStr = parts[1];

        // Convert to numbers. JavaScript object keys are implicitly strings,
        // but it's good practice to use numbers for keys if they are numeric.
        // When looking up, a numeric key will correctly find the stringified key.
        const permitId = parseInt(permitIdStr, 10);
        const serviceCenterId = parseInt(serviceCenterIdStr, 10);

        // Check if parsing was successful (NaN means not a number)
        if (!isNaN(permitId) && !isNaN(serviceCenterId)) {
            permitToServiceCenterMap[permitId] = serviceCenterId;
        } else {
            console.warn(`Warning: Could not parse line to numbers: "${line}" - skipping.`);
        }
    } else if (line) { // If the line is not empty but doesn't have 2 parts
        console.warn(`Warning: Malformed line: "${line}" - skipping.`);
    }
}

/**
 * Takes a permit number (رقم التصريح) and returns the corresponding
 * service center number (رقم مركز الخدمة).
 *
 * @param {number|string} permitNumber - The permit number to look up.
 * @returns {number|undefined} The service center number if found, otherwise undefined.
 */
export function getServiceCenterForPermit(permitNumber) {
    // Ensure permitNumber is treated as a number for lookup,
    // even if it's passed as a string.
    const numericPermitNumber = parseInt(permitNumber, 10);
    if (isNaN(numericPermitNumber)) {
        return undefined; // Or handle error appropriately
    }
    return permitToServiceCenterMap[numericPermitNumber];
}
